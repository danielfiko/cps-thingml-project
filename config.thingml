import "psm_sim.thingml"
import "pim.thingml"
import "io.thingml"
import "javatimer.thingml"

configuration CPS {
	instance T1:MQTTDriver
	instance trace:TraceOnly
	instance pim:PIM
	instance myself:Human
	instance g_temp:TimerJava
	instance g_humn:TimerJava
	instance g_switch:TimerJava
	
	// PSM	
	connector T1.provide_temp => pim.get_sensor
	
	// The luminance and motion are not used in this model only traced
	connector T1.provide_lum_motion => trace.trace_lum_motion
	connector trace.build =>T1.require_val
	
	// HMI
	connector myself.send_cmd => pim.human_input
	
	// PIM outwards 
	connector pim.request_sensor => T1.require_val
	connector pim.request_actuator => T1.require_val
	connector pim.human_output => myself.get_values
	
	connector pim.guard_temperature =>g_temp.timer
	connector pim.guard_human => g_humn.timer
	connector pim.guard_switch => g_switch.timer
	
	//Receive values from Openhab connected sensors via MQTT protocol
	connector T1.MQTT over MQTT
	
	/*
	//instance zstick:ZstickManager
	instance T1:MQTTDriver
	//instance onoff1:OnOffSet
	instance pim:PIM
	instance myself:Human
	instance g_temp:TimerJava
	instance g_humn:TimerJava
	
	instance g_motion:TimerJava
	instance timer : TimerJava
	instance pwr_timer:TimerJava
	//instance energy_save_manager:EnergySavingManager
	
	/* Test Components
	instance tg:TempSim
	instance onoffobs:OnOffSim
	instance starter:StartButton
	
	// The luminance and motion are not used in this model only traced
	connector T1.provide_lum_motion => trace.trace_lum_motion
	connector trace.build =>T1.require_val
	
	/* / PSM
	connector zstick.to_T1 => T1.initial
	connector zstick.to_onoff1 => onoff1.initial 
	
	connector T1.provide_val => pim.get_sensor
	connector T1.timer => timer.timer
	connector T1.show_values => tg.show_values
	
	connector onoff1.show_val => onoffobs.show_onoff
	connector onoff1.send_state => pim.recv_state
	connector onoff1.pwr_timer => pwr_timer.timer
	
	connector onoff1.send_power_usage => pim.get_power_usage
	
	connector energy_save_manager.guard_motion => g_motion.timer
	connector energy_save_manager.send_motion_status => pim.recieve_motion_status
	
	// HMI
	connector myself.send_cmd => pim.human_input
	
	// PIM outwards 
	connector pim.request_sensor => T1.require_val
	connector pim.request_actuator => onoff1.require_val
	connector pim.human_output => myself.get_values
	
	connector pim.guard_temperature =>g_temp.timer
	connector pim.guard_human => g_humn.timer
	connector pim.guard_switch => g_switch.timer
	
	// Test synchronisation etc.
	connector tg.give_values => T1.get_values
	connector onoffobs.give_power_usage => onoff1.get_power_usage
	connector tg.give_values => energy_save_manager.recieve_motion_status
	
	connector myself.send_sync_sensor => tg.show_values
	connector tg.sync_cmd => myself.get_values
	connector onoffobs.send_sync_sensor => tg.show_values
	connector onoffobs.send_sync_human => myself.get_values
	connector starter.start => myself.get_values
	*/
}