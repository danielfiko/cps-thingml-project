/* This is the PSM the Platform Specific Model */
/*** This version contains the real gadget platform */

/* This is the first very hard-coded Z-wave version 190105 */
/* This version is very hardcoded for the openhabianpi version 190206 */

/* This version has possibility to change the polling intervals for temperature */
import "datatypes.thingml" from stl	
import "pim_messages.thingml"
import "javatimer.thingml" // 160310


protocol MQTT @serializer "JSON"
  @mqtt_broker_address "localhost"
  @mqtt_broker_port "1883" 
  @mqtt_publish_topic "CPS2021/SwitchControl"
  @mqtt_subscribe_topic "CPS2021/tempoutput";


thing MQTTDriver includes TemperatureMsg, OnOffMsg, LuminanceMsg, MotionMsg, GeneralMsg {
	required port provide_temp {sends temperature}
	required port provide_lum_motion {sends luminance, motion, nomotion}
	provided port require_val {receives add_thermometer, add_lightsensor, add_device, add_motionsensor, SwitchOn, SwitchOff}
	
	//Only one MQTT port to receive the sensor values
	provided port MQTT {
		receives temperature,luminance,motion, nomotion
		sends SwitchOn,SwitchOff
	}

	property thermometers:Integer[25] // Identifiers of the thermometers in the set
	property thermotext:String[25] // corresponding explanatory text 
	property thermoval:Double[25] // values to report from the corresponding thermometer
	
	property lightsensors:Integer[25] // Identifiers of the lightsensors in the set
	property lightval:Double[25] // values to report from the corresponding lightsensor
	
	property motionsensors:Integer[25] // Identifiers of the thermometers in the set
	
	property last_mo:Integer = 0 // number of motion sensors in the set  
	property last_light:Integer = 0 // number of light sensors in the set  
	property last_thermo:Integer = 0 // number of thermometers in the set 
	property foundL:Boolean // temporary - true when item found in loop
	property i:Integer // runner index in list
	property id_s:Integer // temporary id value (to be used with kick-down)
	property found:Boolean // temporary - true when item found in loop
	
	
	property onoffswitches:Integer[25] // Identifiers of the onoffswitches in the set
	property last_onoff:Integer = 0 // number of onoff switches in the set 		
	property did:Integer // temporary device id
	
	statechart behaviorMQTTDriver init Idle {
	
		state Idle {
			transition -> Idle
			event put_t:MQTT?temperature
			action do
				id_s=put_t.id
				i=0
				found = false
				while (i<last_thermo and (not found)) do
					if (id_s==thermometers[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					thermoval[i-1]=put_t.t
					provide_temp!temperature(id_s,thermotext[i],put_t.t)				
				end
			end
			
			transition -> Idle
			event put_lum:MQTT?luminance
			action do
				id_s=put_lum.id
				
				i=0
				foundL = false
				while (i<last_light and (not foundL)) do
					if (id_s==lightsensors[i]) do
						foundL=true // trick to terminate while loop
					end
					i=i+1
				end
				if (foundL) do
					lightval[i-1]=put_lum.lum
					provide_lum_motion!luminance(id_s,put_lum.lum)	
				end
			end
			
			// Receiving motion from Openhab and sending it instantaneously to PIM
			transition -> Idle
			event put_mo:MQTT?motion
			action do
				id_s=put_mo.id
				i=0
				found = false
				while (i<last_mo and (not found)) do
					if (id_s==motionsensors[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					provide_lum_motion!motion(id_s)	
				end
			end

			transition -> Idle
			event put_mo:MQTT?nomotion
			action do
				id_s=put_mo.id
				i=0
				found = false
				while (i<last_mo and (not found)) do
					if (id_s==motionsensors[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					provide_lum_motion!nomotion(id_s)	
				end
			end
			
			transition -> Idle
			event addt:require_val?add_thermometer
			action do				
				id_s=addt.id
				thermometers[last_thermo]=id_s
				thermotext[last_thermo]=addt.txt
				thermoval[last_thermo]= 20 // just a default temperature
				last_thermo = last_thermo+1
			end
			
			//Add Light Sensors
			transition -> Idle
			event addlum:require_val?add_lightsensor
			action do				
				id_s=addlum.id
				lightsensors[last_light]=id_s
				lightval[last_light]= 50 // just a default val
				last_light = last_light+1
			end
			
			//Add Motion Sensors
			transition -> Idle
			event add_ms:require_val?add_motionsensor
			action do				
				id_s=add_ms.id
				motionsensors[last_mo]=id_s
				last_mo = last_mo+1
			end
			
			transition -> Idle
			event add_dev: require_val?add_device
			action do
				did=add_dev.did
				
				onoffswitches[last_onoff]=did
				last_onoff = last_onoff+1
			end
			transition -> Idle
			event swon: require_val?SwitchOn
			action do
				did=swon.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					MQTT!SwitchOn(did)
				end
			end
			transition -> Idle
			event swoff: require_val?SwitchOff
			action do
				did=swoff.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					MQTT!SwitchOff(did)
				end
			end			
		}
	}
} // MQTTDriver

