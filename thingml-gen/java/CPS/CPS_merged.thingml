thing MQTTDriver includes TemperatureMsg , OnOffMsg , LuminanceMsg , MotionMsg , GeneralMsg {
	required port provide_temp {
		sends temperature
	}
	required port provide_lum_motion {
		sends luminance sends motion sends nomotion
	}
	provided port require_val {
		receives add_thermometer receives add_lightsensor receives add_device receives add_motionsensor receives SwitchOn receives SwitchOff
	}
	provided port MQTT {
		sends SwitchOn sends SwitchOff receives temperature receives luminance receives motion receives nomotion
	}
	property thermometers : Integer [ 25 ]
	property thermotext : String [ 25 ]
	property thermoval : Double [ 25 ]
	property lightsensors : Integer [ 25 ]
	property lightval : Double [ 25 ]
	property motionsensors : Integer [ 25 ]
	property last_mo : Integer = 0
	property last_light : Integer = 0
	property last_thermo : Integer = 0
	property foundL : Boolean
	property i : Integer
	property id_s : Integer
	property found : Boolean
	property onoffswitches : Integer [ 25 ]
	property last_onoff : Integer = 0
	property did : Integer
	statechart behaviorMQTTDriver init Idle {
		state Idle {
			transition -> Idle
			event put_t : MQTT?temperature
			action do
				id_s = put_t.id
				i = 0
				found = false
				while (i < last_thermo and (not found)) do
					if (id_s == thermometers [i]) do
						found = true
					end
					i = i + 1
				end
				if (found) do
					thermoval[i - 1] = put_t.t
					provide_temp!temperature(id_s, thermotext [i], put_t.t)
				end
			end
			transition -> Idle
			event put_lum : MQTT?luminance
			action do
				id_s = put_lum.id
				i = 0
				foundL = false
				while (i < last_light and (not foundL)) do
					if (id_s == lightsensors [i]) do
						foundL = true
					end
					i = i + 1
				end
				if (foundL) do
					lightval[i - 1] = put_lum.lum
					provide_lum_motion!luminance(id_s, put_lum.lum)
				end
			end
			transition -> Idle
			event put_mo : MQTT?motion
			action do
				id_s = put_mo.id
				i = 0
				found = false
				while (i < last_mo and (not found)) do
					if (id_s == motionsensors [i]) do
						found = true
					end
					i = i + 1
				end
				if (found) do
					provide_lum_motion!motion(id_s)
				end
			end
			transition -> Idle
			event put_mo : MQTT?nomotion
			action do
				id_s = put_mo.id
				i = 0
				found = false
				while (i < last_mo and (not found)) do
					if (id_s == motionsensors [i]) do
						found = true
					end
					i = i + 1
				end
				if (found) do
					provide_lum_motion!nomotion(id_s)
				end
			end
			transition -> Idle
			event addt : require_val?add_thermometer
			action do
				id_s = addt.id
				thermometers[last_thermo] = id_s
				thermotext[last_thermo] = addt.txt
				thermoval[last_thermo] = 20
				last_thermo = last_thermo + 1
			end
			transition -> Idle
			event addlum : require_val?add_lightsensor
			action do
				id_s = addlum.id
				lightsensors[last_light] = id_s
				lightval[last_light] = 50
				last_light = last_light + 1
			end
			transition -> Idle
			event add_ms : require_val?add_motionsensor
			action do
				id_s = add_ms.id
				motionsensors[last_mo] = id_s
				last_mo = last_mo + 1
			end
			transition -> Idle
			event add_dev : require_val?add_device
			action do
				did = add_dev.did
				onoffswitches[last_onoff] = did
				last_onoff = last_onoff + 1
			end
			transition -> Idle
			event swon : require_val?SwitchOn
			action do
				did = swon.did
				i = 0
				found = false
				while (i < last_onoff and (not found)) do
					if (did == onoffswitches [i]) do
						found = true
					end
					i = i + 1
				end
				if (found) do
					MQTT!SwitchOn(did)
				end
			end
			transition -> Idle
			event swoff : require_val?SwitchOff
			action do
				did = swoff.did
				i = 0
				found = false
				while (i < last_onoff and (not found)) do
					if (did == onoffswitches [i]) do
						found = true
					end
					i = i + 1
				end
				if (found) do
					MQTT!SwitchOff(did)
				end
			end
		}
	}
}
thing PIM includes GeneralMsg , TemperatureMsg , OnOffMsg , TimerMsgs , SwitchMsg , MotionSensorMsg {
	provided port get_sensor {
		receives temperature
	}
	provided port get_power_usage {
		receives current_power receives total_power
	}
	required port request_sensor {
		sends add_thermometer sends set_polling_interval
	}
	required port request_actuator {
		sends add_device sends SwitchOn sends SwitchOff sends StateQuery sends ResetTotalPower sends show_current_power sends show_total_power
	}
	provided port recv_state {
		receives SwitchStateOn receives SwitchStateOff receives CurrentPower receives TotalPower receives SwitchChangeOk receives SwitchChangeFail
	}
	provided port human_input {
		receives add_thermometer receives add_device receives SwitchOn receives SwitchOff receives set_temperature receives set_polling_interval receives StateQuery receives ResetTotalPower receives set_energy_saving_temp receives show_current_power receives show_total_power
	}
	required port human_output {
		sends temperature sends prompt sends SwitchStateOn sends SwitchStateOff
	}
	required port guard_temperature {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	required port guard_human {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	required port guard_switch {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	provided port recieve_motion_status {
		receives motion receives no_motion
	}
	property tmrature : Double = 20
	property thermo_id : Integer
	property switch_id : Integer
	property increasing : Boolean
	property not_sent_req : Boolean = false
	property lasttemp : Double = 0
	property energy_saving_temp : Double
	property comfort_temp : Double
	statechart PIM_behavior init Build {
		on entry println ("Running The Room X3B.sim")
		composite state Build init AddThermo keeps history {
			on entry guard_human!timer_start(30000)
			on exit guard_human!timer_cancel()
			state AddThermo {
				transition -> AddDevice
				event addt : human_input?add_thermometer
				action do
					thermo_id = addt.id
					request_sensor!add_thermometer(thermo_id, addt.txt)
					human_output!prompt("Please add one switch device")
				end
				transition -> AddThermo
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer")
				end
			}
			state AddDevice {
				transition -> SetThermostat
				event adddev : human_input?add_device
				action do
					switch_id = adddev.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please give thermostat temperature setting")
				end
				transition -> AddDevice
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometer already added, add device")
				end
			}
			state SetThermostat {
				transition -> SetThermostat
				event human_input?add_thermometer
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> SetThermostat
				event human_input?add_device
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> SetThermostat
				event human_input?SwitchOn
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> SetThermostat
				event human_input?SwitchOff
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
				transition -> SetThermostat
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end
			}
			internal
			event get_sensor?temperature
			action do
			end
			transition -> Running
			event set_temp : human_input?set_temperature
			action do
				tmrature = set_temp.t
				comfort_temp = tmrature
				human_output!prompt("Now entering thermostat. Please give temperature observations")
			end
			transition -> Build
			event tmout : guard_human?timer_timeout
			action do
				human_output!prompt("Please continue doing the build of the temperature control")
			end
		}
		composite state Running init Thermostat keeps history {
			composite state Thermostat init TemprDecide {
				state TemprDecide {
					transition -> TemprDecrease guard lasttemp >= tmrature - 1
					action do
						request_actuator!SwitchOff(switch_id)
					end
					transition -> TemprIncrease guard lasttemp < tmrature - 1
					action do
						request_actuator!SwitchOn(switch_id)
					end
				}
				state TemprIncrease {
					on entry guard_temperature!timer_start(15000)
					on exit guard_temperature!timer_cancel()
					transition -> TemprIncrease
					event temp : get_sensor?temperature
					guard temp.t <= tmrature + 1
					action do
						increasing = true
						if (lasttemp > temp.t) do
							request_actuator!SwitchOn(switch_id)
						end
						else do
							not_sent_req = true
						end
						lasttemp = temp.t
					end
					transition -> TemprDecrease
					event temp2 : get_sensor?temperature
					guard temp2.t > tmrature + 1
					action do
						increasing = false
						request_actuator!SwitchOff(switch_id)
						lasttemp = temp2.t
					end
					transition -> TemprIncrease
					event timout : guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprIncrease - temperature measurement is delayed")
					end
				}
				state TemprDecrease {
					on entry guard_temperature!timer_start(15000)
					on exit guard_temperature!timer_cancel()
					transition -> TemprDecrease
					event temp : get_sensor?temperature
					guard temp.t >= tmrature - 1
					action do
						increasing = false
						if (lasttemp < temp.t) do
							request_actuator!SwitchOff(switch_id)
						end
						else do
							not_sent_req = true
						end
						lasttemp = temp.t
					end
					transition -> TemprIncrease
					event temp2 : get_sensor?temperature
					guard temp2.t < tmrature - 1
					action do
						increasing = true
						request_actuator!SwitchOn(switch_id)
						lasttemp = temp2.t
					end
					transition -> TemprDecrease
					event timout : guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprDecrease - temperature measurement is delayed")
					end
				}
				transition -> On
				event swon : human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Off
				event swoff : human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end
				transition -> Thermostat
				event set_temp : human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Thermostat
				event set_temp : human_input?set_energy_saving_temp
				action do
					tmrature = set_temp.t
					energy_saving_temp = set_temp.t
				end
			}
			state On {
				transition -> Off
				event swoff : human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end
				transition -> On
				event swon : human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp : human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Thermostat
				event set_temp : human_input?set_energy_saving_temp
				action do
					tmrature = set_temp.t
					energy_saving_temp = set_temp.t
				end
				transition -> On
				event temp : get_sensor?temperature
				action do
					if (lasttemp > temp.t) request_actuator!SwitchOn(switch_id)
					lasttemp = temp.t
				end
			}
			state Off {
				transition -> Off
				event swoff : human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end
				transition -> On
				event swon : human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp : human_input?set_energy_saving_temp
				action do
					tmrature = set_temp.t
					energy_saving_temp = set_temp.t
				end
				transition -> Thermostat
				event set_temp : human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Off
				event temp : get_sensor?temperature
				action do
					if (lasttemp < temp.t) request_actuator!SwitchOff(switch_id)
					lasttemp = temp.t
				end
			}
			transition -> Running
			event pollint : human_input?set_polling_interval
			action do
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			transition -> Running
			event switch : human_input?ResetTotalPower
			action do
				request_actuator!ResetTotalPower(switch.did)
			end
			transition -> Running
			event power : get_power_usage?current_power
			action do
				human_output!prompt("Current power usage in Watt: " + power.kw)
			end
			transition -> Running
			event power : human_input?show_current_power
			action do
				request_actuator!show_current_power(1)
			end
			transition -> Running
			event power : get_power_usage?total_power
			action do
				human_output!prompt("Total power usage in kWh: " + power.kwh)
			end
			transition -> Running
			event power : human_input?show_total_power
			action do
				request_actuator!show_total_power(1)
			end
			transition -> Running
			event motion_sensor : recieve_motion_status?no_motion
			action do
				comfort_temp = tmrature
				tmrature = energy_saving_temp
			end
			transition -> Running
			event motion_sensor : recieve_motion_status?motion
			action do
				if (comfort_temp > 0) tmrature = comfort_temp
			end
			transition -> Running
			event recv_state?SwitchChangeOk
			action do
			end
			transition -> Running
			event recv_state?SwitchChangeFail
			action do
				human_output!prompt("Switch has failed!")
			end
			transition -> Running
			event human_input?add_thermometer
			action do
				human_output!prompt("Adding thermometers has been done and then blocked")
			end
			transition -> Running
			event human_input?add_device
			action do
				human_output!prompt("Adding devices has been done and then blocked")
			end
			transition -> Running
			event human_input?SwitchOn
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOn at PIM.Running")
			end
			transition -> Running
			event human_input?SwitchOff
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOff at PIM.Running")
			end
			transition -> Running
			event human_input?set_temperature
			action do
				human_output!prompt("INTERNAL ERROR: Impossible set_temperature at PIM.Running")
			end
			transition -> Running
			event temp : get_sensor?temperature
			action do
				human_output!prompt("INTERNAL ERROR: temperature received at PIM.Running")
				lasttemp = temp.t
			end
		}
	}
}
thing Human includes TemperatureMsg , GeneralMsg , OnOffMsg , SwitchMsg @mock "true" {
	required port send_cmd {
		sends add_thermometer sends add_device sends set_temperature sends SwitchOn sends SwitchOff sends set_polling_interval sends ResetTotalPower sends set_energy_saving_temp
	}
	provided port get_values {
		receives temperature receives prompt receives SwitchStateOn receives SwitchStateOff
	}
}
thing TraceOnly includes LuminanceMsg , MotionMsg @mock "true" {
	required port build {
		sends add_lightsensor sends add_motionsensor
	}
	provided port trace_lum_motion {
		receives luminance receives motion receives nomotion
	}
}
object JTimerTask @java_type "java.util.TimerTask"
object JTimer @java_type "java.util.Timer"
thing TimerJava includes Timer @pim "Timer" @platform "java" {
	property timer : JTimer
	property timer_task : JTimerTask
	function startTimer(delay : Integer) do
		timer = `new java.util.Timer()`
	`java.util.TimerTask temp_task = new java.util.TimerTask(){public void run(){`
		timer!timer_timeout()
	`}};`
		timer_task = `temp_task`
		`` & timer & `.schedule(` & timer_task & `, ` & delay & `);`
	end
	function cancel() do
		if (not (timer_task == `null`)) do
			`` & timer_task & `.cancel();`
			`` & timer & `.purge();`
		end
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.delay > 0
			action do
				startTimer(m.delay)
			end
			internal cancel
			event m : timer?timer_cancel
			action cancel()
		}
	}
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@java_type "byte"
	@js_type "byte"
	@go_type "byte"
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@java_type "byte"
	@js_type "byte"
	@go_type "byte"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "bool"
	@java_type "boolean"
	@js_type "boolean"
	@go_type "bool"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@java_type "int"
	@js_type "short"
	@go_type "uint8"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@java_type "int"
	@js_type "short"
	@go_type "int8"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@java_type "int"
	@js_type "int"
	@go_type "uint16"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@java_type "int"
	@js_type "short"
	@go_type "int16"
datatype Int32<4>
	@type_checker "Integer"
	@c_type "int32_t"
	@java_type "long"
	@js_type "int"
	@go_type "int32"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@java_type "long"
	@js_type "long"
	@go_type "uint32"
datatype Long<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@java_type "long"
	@js_type "long"
	@go_type "uint32"
datatype Int64<8>
	@type_checker "Integer"
	@c_type "int64_t"
	@java_type "long"
	@js_type "long"
	@go_type "int64"
datatype UInt64<8>
	@type_checker "Integer"
	@c_type "uint64_t"
	@java_type "long"
	@js_type "long"
	@go_type "uint64"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@java_type "int"
	@js_type "short"
	@go_type "int16"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@java_type "float"
	@js_type "float"
	@go_type "float32"
datatype Double<8>
	@type_checker "Real"
	@c_type "double"
	@java_type "double"
	@js_type "double"
	@go_type "float64"
object String
	@serializable
	@c_type "char *"
	@arduino_type "String"
	@java_type "String"
	@js_type "String"
	@go_type "string"
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
thing fragment GeneralMsg {
	message sensorinfo(model : String, proto : String, sid : Integer, dataTypes : Integer, temperature : Double, humidity : Long, timeStamp : Long)
	message deviceinfo(did : Integer, name : String, model : String, proto : String, ttype : String, meth : Integer, lastCmd : String, lastValue : Long)
	message set_polling_interval(intrvl : Integer)
	message prompt(txt : String)
}
thing fragment LuminanceMsg {
	message luminance(id : Integer, lum : Double)
	message add_lightsensor(id : Integer)
	message set_luminance(lum : Double)
}
thing fragment MotionMsg {
	message motion(id : Integer)
	message nomotion(id : Integer)
	message add_motionsensor(id : Integer)
}
thing fragment TestMsg {
	message start_temp()
	message next_temp()
	message next_human()
	message next_motion()
}
thing fragment TemperatureMsg {
	message temperature(id : Integer, txt : String, t : Double)
	message add_thermometer(id : Integer, txt : String)
	message set_temperature(t : Double)
	message set_energy_saving_temp(t : Double)
}
thing fragment DeviceGeneral {
	message add_device(did : Integer)
}
thing fragment OnOffMsg includes DeviceGeneral {
	message SwitchOn(did : Integer)
	message SwitchOff(did : Integer)
	message SwitchStateOn(did : Integer)
	message SwitchStateOff(did : Integer)
	message StateQuery(did : Integer)
	message CurrentPower(power : Integer)
	message TotalPower(power : Double)
	message SwitchChangeOk(did : Integer)
	message SwitchChangeFail(did : Integer)
	message ResetTotalPower(did : Integer)
}
thing fragment SwitchMsg {
	message current_power(id : Integer, kw : Integer)
	message total_power(id : Integer, kwh : Double)
	message show_current_power(did : Integer)
	message show_total_power(did : Integer)
}
thing fragment MotionSensorMsg {
	message motion(did : Integer)
	message no_motion(did : Integer)
	message add_motion_sensor(did : Integer)
}
thing fragment TimerMsgs {
	message timer_start(delay : Integer)
	message timer_cancel()
	@debug "false"
	message timer_timeout()
}
thing fragment Timer includes TimerMsgs {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
thing fragment TimerClient includes TimerMsgs {
	required port timer {
		sends timer_start sends timer_cancel receives timer_timeout
	}
}
thing TimerClientMock includes TimerClient @mock "true" {
}
protocol MQTT
	@serializer "JSON"
	@mqtt_broker_address "localhost"
	@mqtt_broker_port "1883"
	@mqtt_publish_topic "CPS2021/SwitchControl"
	@mqtt_subscribe_topic "CPS2021/tempoutput"

configuration CPS {
	instance T1 : MQTTDriver
	instance trace : TraceOnly
	instance pim : PIM
	instance myself : Human
	instance g_temp : TimerJava
	instance g_humn : TimerJava
	instance g_switch : TimerJava
	connector T1.provide_temp => pim . get_sensor
	connector T1.provide_lum_motion => trace . trace_lum_motion
	connector trace.build => T1 . require_val
	connector myself.send_cmd => pim . human_input
	connector pim.request_sensor => T1 . require_val
	connector pim.request_actuator => T1 . require_val
	connector pim.human_output => myself . get_values
	connector pim.guard_temperature => g_temp . timer
	connector pim.guard_human => g_humn . timer
	connector pim.guard_switch => g_switch . timer
	connector T1.MQTT over MQTT
}
