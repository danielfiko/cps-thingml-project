/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_recv_state, IPIM_human_input, IPIM_get_sensor, IPIM_get_power_usage, IPIM_recieve_motion_status, IPIM_guard_switch, IPIM_guard_temperature, IPIM_guard_human {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\ttmrature = " + PIM_tmrature_var;
result += "\tthermo_id = " + PIM_thermo_id_var;
result += "\tswitch_id = " + PIM_switch_id_var;
result += "\tincreasing = " + PIM_increasing_var;
result += "\tnot_sent_req = " + PIM_not_sent_req_var;
result += "\tlasttemp = " + PIM_lasttemp_var;
result += "\tenergy_saving_temp = " + PIM_energy_saving_temp_var;
result += "\tcomfort_temp = " + PIM_comfort_temp_var;
result += "";
return result;
}

public synchronized void temperature_via_get_sensor(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(get_sensor_port);
receive(_msg);
}

public synchronized void current_power_via_get_power_usage(int SwitchMsg_current_power_id_var, int SwitchMsg_current_power_kw_var){
final Event _msg = current_powerType.instantiate(SwitchMsg_current_power_id_var, SwitchMsg_current_power_kw_var);
_msg.setPort(get_power_usage_port);
receive(_msg);
}

public synchronized void total_power_via_get_power_usage(int SwitchMsg_total_power_id_var, double SwitchMsg_total_power_kwh_var){
final Event _msg = total_powerType.instantiate(SwitchMsg_total_power_id_var, SwitchMsg_total_power_kwh_var);
_msg.setPort(get_power_usage_port);
receive(_msg);
}

public synchronized void SwitchStateOn_via_recv_state(int OnOffMsg_SwitchStateOn_did_var){
final Event _msg = SwitchStateOnType.instantiate(OnOffMsg_SwitchStateOn_did_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void SwitchStateOff_via_recv_state(int OnOffMsg_SwitchStateOff_did_var){
final Event _msg = SwitchStateOffType.instantiate(OnOffMsg_SwitchStateOff_did_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void CurrentPower_via_recv_state(int OnOffMsg_CurrentPower_power_var){
final Event _msg = CurrentPowerType.instantiate(OnOffMsg_CurrentPower_power_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void TotalPower_via_recv_state(double OnOffMsg_TotalPower_power_var){
final Event _msg = TotalPowerType.instantiate(OnOffMsg_TotalPower_power_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void SwitchChangeOk_via_recv_state(int OnOffMsg_SwitchChangeOk_did_var){
final Event _msg = SwitchChangeOkType.instantiate(OnOffMsg_SwitchChangeOk_did_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void SwitchChangeFail_via_recv_state(int OnOffMsg_SwitchChangeFail_did_var){
final Event _msg = SwitchChangeFailType.instantiate(OnOffMsg_SwitchChangeFail_did_var);
_msg.setPort(recv_state_port);
receive(_msg);
}

public synchronized void add_thermometer_via_human_input(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
final Event _msg = add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void add_device_via_human_input(int DeviceGeneral_add_device_did_var){
final Event _msg = add_deviceType.instantiate(DeviceGeneral_add_device_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOn_via_human_input(int OnOffMsg_SwitchOn_did_var){
final Event _msg = SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void SwitchOff_via_human_input(int OnOffMsg_SwitchOff_did_var){
final Event _msg = SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_temperature_via_human_input(double TemperatureMsg_set_temperature_t_var){
final Event _msg = set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_polling_interval_via_human_input(int GeneralMsg_set_polling_interval_intrvl_var){
final Event _msg = set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void StateQuery_via_human_input(int OnOffMsg_StateQuery_did_var){
final Event _msg = StateQueryType.instantiate(OnOffMsg_StateQuery_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void ResetTotalPower_via_human_input(int OnOffMsg_ResetTotalPower_did_var){
final Event _msg = ResetTotalPowerType.instantiate(OnOffMsg_ResetTotalPower_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void set_energy_saving_temp_via_human_input(double TemperatureMsg_set_energy_saving_temp_t_var){
final Event _msg = set_energy_saving_tempType.instantiate(TemperatureMsg_set_energy_saving_temp_t_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void show_current_power_via_human_input(int SwitchMsg_show_current_power_did_var){
final Event _msg = show_current_powerType.instantiate(SwitchMsg_show_current_power_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void show_total_power_via_human_input(int SwitchMsg_show_total_power_did_var){
final Event _msg = show_total_powerType.instantiate(SwitchMsg_show_total_power_did_var);
_msg.setPort(human_input_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_temperature(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_temperature_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_human(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_human_port);
receive(_msg);
}

public synchronized void timer_timeout_via_guard_switch(){
final Event _msg = timer_timeoutType.instantiate();
_msg.setPort(guard_switch_port);
receive(_msg);
}

public synchronized void motion_via_recieve_motion_status(int MotionSensorMsg_motion_did_var){
final Event _msg = motionType.instantiate(MotionSensorMsg_motion_did_var);
_msg.setPort(recieve_motion_status_port);
receive(_msg);
}

public synchronized void no_motion_via_recieve_motion_status(int MotionSensorMsg_no_motion_did_var){
final Event _msg = no_motionType.instantiate(MotionSensorMsg_no_motion_did_var);
_msg.setPort(recieve_motion_status_port);
receive(_msg);
}

private void sendAdd_thermometer_via_request_sensor(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
}

private void sendSet_polling_interval_via_request_sensor(int GeneralMsg_set_polling_interval_intrvl_var){
request_sensor_port.send(set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var));
}

private void sendAdd_device_via_request_actuator(int DeviceGeneral_add_device_did_var){
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
}

private void sendSwitchOn_via_request_actuator(int OnOffMsg_SwitchOn_did_var){
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_request_actuator(int OnOffMsg_SwitchOff_did_var){
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendStateQuery_via_request_actuator(int OnOffMsg_StateQuery_did_var){
request_actuator_port.send(StateQueryType.instantiate(OnOffMsg_StateQuery_did_var));
}

private void sendResetTotalPower_via_request_actuator(int OnOffMsg_ResetTotalPower_did_var){
request_actuator_port.send(ResetTotalPowerType.instantiate(OnOffMsg_ResetTotalPower_did_var));
}

private void sendShow_current_power_via_request_actuator(int SwitchMsg_show_current_power_did_var){
request_actuator_port.send(show_current_powerType.instantiate(SwitchMsg_show_current_power_did_var));
}

private void sendShow_total_power_via_request_actuator(int SwitchMsg_show_total_power_did_var){
request_actuator_port.send(show_total_powerType.instantiate(SwitchMsg_show_total_power_did_var));
}

private void sendTemperature_via_human_output(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
}

private void sendPrompt_via_human_output(String GeneralMsg_prompt_txt_var){
human_output_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
}

private void sendSwitchStateOn_via_human_output(int OnOffMsg_SwitchStateOn_did_var){
human_output_port.send(SwitchStateOnType.instantiate(OnOffMsg_SwitchStateOn_did_var));
}

private void sendSwitchStateOff_via_human_output(int OnOffMsg_SwitchStateOff_did_var){
human_output_port.send(SwitchStateOffType.instantiate(OnOffMsg_SwitchStateOff_did_var));
}

private void sendTimer_start_via_guard_temperature(int TimerMsgs_timer_start_delay_var){
guard_temperature_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_temperature(){
guard_temperature_port.send(timer_cancelType.instantiate());
}

private void sendTimer_start_via_guard_human(int TimerMsgs_timer_start_delay_var){
guard_human_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_human(){
guard_human_port.send(timer_cancelType.instantiate());
}

private void sendTimer_start_via_guard_switch(int TimerMsgs_timer_start_delay_var){
guard_switch_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_guard_switch(){
guard_switch_port.send(timer_cancelType.instantiate());
}

//Attributes
private double PIM_energy_saving_temp_var;
private double PIM_lasttemp_var;
private double PIM_tmrature_var;
private int PIM_thermo_id_var;
private double PIM_comfort_temp_var;
private int PIM_switch_id_var;
private boolean PIM_increasing_var;
private boolean PIM_not_sent_req_var;
//Ports
private Port get_sensor_port;
private Port get_power_usage_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port recv_state_port;
private Port human_input_port;
private Port human_output_port;
private Port guard_temperature_port;
private Port guard_human_port;
private Port guard_switch_port;
private Port recieve_motion_status_port;
//Message types
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
protected final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
protected final PromptMessageType promptType = new PromptMessageType();
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_energy_saving_tempMessageType set_energy_saving_tempType = new Set_energy_saving_tempMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final SwitchStateOnMessageType SwitchStateOnType = new SwitchStateOnMessageType();
protected final SwitchStateOffMessageType SwitchStateOffType = new SwitchStateOffMessageType();
protected final StateQueryMessageType StateQueryType = new StateQueryMessageType();
protected final CurrentPowerMessageType CurrentPowerType = new CurrentPowerMessageType();
protected final TotalPowerMessageType TotalPowerType = new TotalPowerMessageType();
protected final SwitchChangeOkMessageType SwitchChangeOkType = new SwitchChangeOkMessageType();
protected final SwitchChangeFailMessageType SwitchChangeFailType = new SwitchChangeFailMessageType();
protected final ResetTotalPowerMessageType ResetTotalPowerType = new ResetTotalPowerMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
protected final Current_powerMessageType current_powerType = new Current_powerMessageType();
protected final Total_powerMessageType total_powerType = new Total_powerMessageType();
protected final Show_current_powerMessageType show_current_powerType = new Show_current_powerMessageType();
protected final Show_total_powerMessageType show_total_powerType = new Show_total_powerMessageType();
protected final MotionMessageType motionType = new MotionMessageType();
protected final No_motionMessageType no_motionType = new No_motionMessageType();
protected final Add_motion_sensorMessageType add_motion_sensorType = new Add_motion_sensorMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
public double getPIM_energy_saving_temp_var() {
return PIM_energy_saving_temp_var;
}

public void setPIM_energy_saving_temp_var(double PIM_energy_saving_temp_var) {
this.PIM_energy_saving_temp_var = PIM_energy_saving_temp_var;
}

public PIM initPIM_energy_saving_temp_var(double PIM_energy_saving_temp_var) {
this.PIM_energy_saving_temp_var = PIM_energy_saving_temp_var;
return this;
}

public double getPIM_lasttemp_var() {
return PIM_lasttemp_var;
}

public void setPIM_lasttemp_var(double PIM_lasttemp_var) {
this.PIM_lasttemp_var = PIM_lasttemp_var;
}

public PIM initPIM_lasttemp_var(double PIM_lasttemp_var) {
this.PIM_lasttemp_var = PIM_lasttemp_var;
return this;
}

public double getPIM_tmrature_var() {
return PIM_tmrature_var;
}

public void setPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
}

public PIM initPIM_tmrature_var(double PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
return this;
}

public int getPIM_thermo_id_var() {
return PIM_thermo_id_var;
}

public void setPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
}

public PIM initPIM_thermo_id_var(int PIM_thermo_id_var) {
this.PIM_thermo_id_var = PIM_thermo_id_var;
return this;
}

public double getPIM_comfort_temp_var() {
return PIM_comfort_temp_var;
}

public void setPIM_comfort_temp_var(double PIM_comfort_temp_var) {
this.PIM_comfort_temp_var = PIM_comfort_temp_var;
}

public PIM initPIM_comfort_temp_var(double PIM_comfort_temp_var) {
this.PIM_comfort_temp_var = PIM_comfort_temp_var;
return this;
}

public int getPIM_switch_id_var() {
return PIM_switch_id_var;
}

public void setPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
}

public PIM initPIM_switch_id_var(int PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
return this;
}

public boolean getPIM_increasing_var() {
return PIM_increasing_var;
}

public void setPIM_increasing_var(boolean PIM_increasing_var) {
this.PIM_increasing_var = PIM_increasing_var;
}

public PIM initPIM_increasing_var(boolean PIM_increasing_var) {
this.PIM_increasing_var = PIM_increasing_var;
return this;
}

public boolean getPIM_not_sent_req_var() {
return PIM_not_sent_req_var;
}

public void setPIM_not_sent_req_var(boolean PIM_not_sent_req_var) {
this.PIM_not_sent_req_var = PIM_not_sent_req_var;
}

public PIM initPIM_not_sent_req_var(boolean PIM_not_sent_req_var) {
this.PIM_not_sent_req_var = PIM_not_sent_req_var;
return this;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getGet_power_usage_port() {
return get_power_usage_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getRecv_state_port() {
return recv_state_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
public Port getGuard_temperature_port() {
return guard_temperature_port;
}
public Port getGuard_human_port() {
return guard_human_port;
}
public Port getGuard_switch_port() {
return guard_switch_port;
}
public Port getRecieve_motion_status_port() {
return recieve_motion_status_port;
}
private CompositeState buildPIM_PIM_behavior(){
final CompositeState state_PIM_PIM_behavior_Build = buildPIM_PIM_behavior_Build();
final CompositeState state_PIM_PIM_behavior_Running = buildPIM_PIM_behavior_Running();
Handler h144974938 = new Handler();
h144974938.from(state_PIM_PIM_behavior_Build);
h144974938.event(temperatureType);
h144974938.port(get_sensor_port);
h144974938.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
});

Transition h1527015097 = new Transition();
h1527015097.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Running);
h1527015097.event(set_temperatureType);
h1527015097.port(human_input_port);
h1527015097.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
PIM_comfort_temp_var = (double) (getPIM_tmrature_var());
sendPrompt_via_human_output((String) ("Now entering thermostat. Please give temperature observations"));
});

Transition h373435202 = new Transition();
h373435202.from(state_PIM_PIM_behavior_Build).to(state_PIM_PIM_behavior_Build);
h373435202.event(timer_timeoutType);
h373435202.port(guard_human_port);
h373435202.action((Event e)->{
sendPrompt_via_human_output((String) ("Please continue doing the build of the temperature control"));
});

Transition h1218573391 = new Transition();
h1218573391.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1218573391.event(set_polling_intervalType);
h1218573391.port(human_input_port);
h1218573391.action((Event e)->{
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendSet_polling_interval_via_request_sensor((int) (set_polling_interval.intrvl));
});

Transition h1423875152 = new Transition();
h1423875152.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1423875152.event(ResetTotalPowerType);
h1423875152.port(human_input_port);
h1423875152.action((Event e)->{
final ResetTotalPowerMessageType.ResetTotalPowerMessage ResetTotalPower = (ResetTotalPowerMessageType.ResetTotalPowerMessage) e;
sendResetTotalPower_via_request_actuator((int) (ResetTotalPower.did));
});

Transition h2057439078 = new Transition();
h2057439078.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h2057439078.event(current_powerType);
h2057439078.port(get_power_usage_port);
h2057439078.action((Event e)->{
final Current_powerMessageType.Current_powerMessage current_power = (Current_powerMessageType.Current_powerMessage) e;
sendPrompt_via_human_output((String) ("Current power usage in Watt: " + current_power.kw));
});

Transition h163048522 = new Transition();
h163048522.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h163048522.event(show_current_powerType);
h163048522.port(human_input_port);
h163048522.action((Event e)->{
final Show_current_powerMessageType.Show_current_powerMessage show_current_power = (Show_current_powerMessageType.Show_current_powerMessage) e;
sendShow_current_power_via_request_actuator((int) (1));
});

Transition h168235852 = new Transition();
h168235852.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h168235852.event(total_powerType);
h168235852.port(get_power_usage_port);
h168235852.action((Event e)->{
final Total_powerMessageType.Total_powerMessage total_power = (Total_powerMessageType.Total_powerMessage) e;
sendPrompt_via_human_output((String) ("Total power usage in kWh: " + total_power.kwh));
});

Transition h1463942959 = new Transition();
h1463942959.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1463942959.event(show_total_powerType);
h1463942959.port(human_input_port);
h1463942959.action((Event e)->{
final Show_total_powerMessageType.Show_total_powerMessage show_total_power = (Show_total_powerMessageType.Show_total_powerMessage) e;
sendShow_total_power_via_request_actuator((int) (1));
});

Transition h854717914 = new Transition();
h854717914.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h854717914.event(no_motionType);
h854717914.port(recieve_motion_status_port);
h854717914.action((Event e)->{
final No_motionMessageType.No_motionMessage no_motion = (No_motionMessageType.No_motionMessage) e;
PIM_comfort_temp_var = (double) (getPIM_tmrature_var());
PIM_tmrature_var = (double) (getPIM_energy_saving_temp_var());
});

Transition h808670787 = new Transition();
h808670787.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h808670787.event(motionType);
h808670787.port(recieve_motion_status_port);
h808670787.action((Event e)->{
final MotionMessageType.MotionMessage motion = (MotionMessageType.MotionMessage) e;
if(getPIM_comfort_temp_var() > 0) {
PIM_tmrature_var = (double) (getPIM_comfort_temp_var());

}
});

Transition h1445345748 = new Transition();
h1445345748.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1445345748.event(SwitchChangeOkType);
h1445345748.port(recv_state_port);
h1445345748.action((Event e)->{
final SwitchChangeOkMessageType.SwitchChangeOkMessage SwitchChangeOk = (SwitchChangeOkMessageType.SwitchChangeOkMessage) e;
});

Transition h241750119 = new Transition();
h241750119.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h241750119.event(SwitchChangeFailType);
h241750119.port(recv_state_port);
h241750119.action((Event e)->{
final SwitchChangeFailMessageType.SwitchChangeFailMessage SwitchChangeFail = (SwitchChangeFailMessageType.SwitchChangeFailMessage) e;
sendPrompt_via_human_output((String) ("Switch has failed!"));
});

Transition h1661783114 = new Transition();
h1661783114.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1661783114.event(add_thermometerType);
h1661783114.port(human_input_port);
h1661783114.action((Event e)->{
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Adding thermometers has been done and then blocked"));
});

Transition h597173900 = new Transition();
h597173900.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h597173900.event(add_deviceType);
h597173900.port(human_input_port);
h597173900.action((Event e)->{
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Adding devices has been done and then blocked"));
});

Transition h247193942 = new Transition();
h247193942.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h247193942.event(SwitchOnType);
h247193942.port(human_input_port);
h247193942.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOn at PIM.Running"));
});

Transition h1476446153 = new Transition();
h1476446153.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1476446153.event(SwitchOffType);
h1476446153.port(human_input_port);
h1476446153.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible SwitchOff at PIM.Running"));
});

Transition h788295903 = new Transition();
h788295903.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h788295903.event(set_temperatureType);
h788295903.port(human_input_port);
h788295903.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible set_temperature at PIM.Running"));
});

Transition h1417054660 = new Transition();
h1417054660.from(state_PIM_PIM_behavior_Running).to(state_PIM_PIM_behavior_Running);
h1417054660.event(temperatureType);
h1417054660.port(get_sensor_port);
h1417054660.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: temperature received at PIM.Running"));
PIM_lasttemp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior");
state_PIM_PIM_behavior.onEntry(()->{
System.out.println(""+(("Running The Room X3B.sim")));
});
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Build);
state_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
state_PIM_PIM_behavior.initial(state_PIM_PIM_behavior_Build);
return state_PIM_PIM_behavior;
}

private CompositeState buildPIM_PIM_behavior_Build(){
final AtomicState state_PIM_PIM_behavior_Build_AddThermo = new AtomicState("AddThermo");
final AtomicState state_PIM_PIM_behavior_Build_AddDevice = new AtomicState("AddDevice");
final AtomicState state_PIM_PIM_behavior_Build_SetThermostat = new AtomicState("SetThermostat");
Transition h1267159812 = new Transition();
h1267159812.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddDevice);
h1267159812.event(add_thermometerType);
h1267159812.port(human_input_port);
h1267159812.action((Event e)->{
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
PIM_thermo_id_var = (int) (add_thermometer.id);
sendAdd_thermometer_via_request_sensor((int) (getPIM_thermo_id_var()), (String) (add_thermometer.txt));
sendPrompt_via_human_output((String) ("Please add one switch device"));
});

Transition h204826696 = new Transition();
h204826696.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddThermo);
h204826696.event(add_deviceType);
h204826696.port(human_input_port);
h204826696.action((Event e)->{
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
});

Transition h359471852 = new Transition();
h359471852.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddThermo);
h359471852.event(SwitchOnType);
h359471852.port(human_input_port);
h359471852.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
});

Transition h1721214070 = new Transition();
h1721214070.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddThermo);
h1721214070.event(SwitchOffType);
h1721214070.port(human_input_port);
h1721214070.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
});

Transition h273843277 = new Transition();
h273843277.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddThermo);
h273843277.event(set_temperatureType);
h273843277.port(human_input_port);
h273843277.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
});

Transition h1681537657 = new Transition();
h1681537657.from(state_PIM_PIM_behavior_Build_AddThermo).to(state_PIM_PIM_behavior_Build_AddThermo);
h1681537657.event(set_polling_intervalType);
h1681537657.port(human_input_port);
h1681537657.action((Event e)->{
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
});

Transition h1169392443 = new Transition();
h1169392443.from(state_PIM_PIM_behavior_Build_AddDevice).to(state_PIM_PIM_behavior_Build_SetThermostat);
h1169392443.event(add_deviceType);
h1169392443.port(human_input_port);
h1169392443.action((Event e)->{
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
PIM_switch_id_var = (int) (add_device.did);
sendAdd_device_via_request_actuator((int) (getPIM_switch_id_var()));
sendPrompt_via_human_output((String) ("Please give thermostat temperature setting"));
});

Transition h1428604556 = new Transition();
h1428604556.from(state_PIM_PIM_behavior_Build_AddDevice).to(state_PIM_PIM_behavior_Build_AddDevice);
h1428604556.event(SwitchOnType);
h1428604556.port(human_input_port);
h1428604556.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
});

Transition h1907993673 = new Transition();
h1907993673.from(state_PIM_PIM_behavior_Build_AddDevice).to(state_PIM_PIM_behavior_Build_AddDevice);
h1907993673.event(SwitchOffType);
h1907993673.port(human_input_port);
h1907993673.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
});

Transition h2098773240 = new Transition();
h2098773240.from(state_PIM_PIM_behavior_Build_AddDevice).to(state_PIM_PIM_behavior_Build_AddDevice);
h2098773240.event(set_polling_intervalType);
h2098773240.port(human_input_port);
h2098773240.action((Event e)->{
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
});

Transition h653574082 = new Transition();
h653574082.from(state_PIM_PIM_behavior_Build_AddDevice).to(state_PIM_PIM_behavior_Build_AddDevice);
h653574082.event(add_thermometerType);
h653574082.port(human_input_port);
h653574082.action((Event e)->{
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Thermometer already added, add device"));
});

Transition h235674846 = new Transition();
h235674846.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h235674846.event(add_thermometerType);
h235674846.port(human_input_port);
h235674846.action((Event e)->{
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h1669152400 = new Transition();
h1669152400.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h1669152400.event(add_deviceType);
h1669152400.port(human_input_port);
h1669152400.action((Event e)->{
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h703075831 = new Transition();
h703075831.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h703075831.event(SwitchOnType);
h703075831.port(human_input_port);
h703075831.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h150296156 = new Transition();
h150296156.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h150296156.event(SwitchOffType);
h150296156.port(human_input_port);
h150296156.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

Transition h549466489 = new Transition();
h549466489.from(state_PIM_PIM_behavior_Build_SetThermostat).to(state_PIM_PIM_behavior_Build_SetThermostat);
h549466489.event(set_polling_intervalType);
h549466489.port(human_input_port);
h549466489.action((Event e)->{
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
});

final CompositeState state_PIM_PIM_behavior_Build = new CompositeState("Build");
state_PIM_PIM_behavior_Build.onEntry(()->{
sendTimer_start_via_guard_human((int) (30000));
});
state_PIM_PIM_behavior_Build.onExit(()->{
sendTimer_cancel_via_guard_human();
});

state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_AddThermo);
state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_AddDevice);
state_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetThermostat);
state_PIM_PIM_behavior_Build.keepHistory(true);
state_PIM_PIM_behavior_Build.initial(state_PIM_PIM_behavior_Build_AddThermo);
return state_PIM_PIM_behavior_Build;
}

private CompositeState buildPIM_PIM_behavior_Running(){
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = buildPIM_PIM_behavior_Running_Thermostat();
final AtomicState state_PIM_PIM_behavior_Running_On = new AtomicState("On");
final AtomicState state_PIM_PIM_behavior_Running_Off = new AtomicState("Off");
Transition h1258888288 = new Transition();
h1258888288.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_On);
h1258888288.event(SwitchOnType);
h1258888288.port(human_input_port);
h1258888288.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h354628826 = new Transition();
h354628826.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Off);
h354628826.event(SwitchOffType);
h354628826.port(human_input_port);
h354628826.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h753016360 = new Transition();
h753016360.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Thermostat);
h753016360.event(set_temperatureType);
h753016360.port(human_input_port);
h753016360.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h76723689 = new Transition();
h76723689.from(state_PIM_PIM_behavior_Running_Thermostat).to(state_PIM_PIM_behavior_Running_Thermostat);
h76723689.event(set_energy_saving_tempType);
h76723689.port(human_input_port);
h76723689.action((Event e)->{
final Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage set_energy_saving_temp = (Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage) e;
PIM_tmrature_var = (double) (set_energy_saving_temp.t);
PIM_energy_saving_temp_var = (double) (set_energy_saving_temp.t);
});

Transition h792995055 = new Transition();
h792995055.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Off);
h792995055.event(SwitchOffType);
h792995055.port(human_input_port);
h792995055.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h160613288 = new Transition();
h160613288.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h160613288.event(SwitchOnType);
h160613288.port(human_input_port);
h160613288.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h863096089 = new Transition();
h863096089.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Thermostat);
h863096089.event(set_temperatureType);
h863096089.port(human_input_port);
h863096089.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h965253107 = new Transition();
h965253107.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_Thermostat);
h965253107.event(set_energy_saving_tempType);
h965253107.port(human_input_port);
h965253107.action((Event e)->{
final Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage set_energy_saving_temp = (Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage) e;
PIM_tmrature_var = (double) (set_energy_saving_temp.t);
PIM_energy_saving_temp_var = (double) (set_energy_saving_temp.t);
});

Transition h1704629542 = new Transition();
h1704629542.from(state_PIM_PIM_behavior_Running_On).to(state_PIM_PIM_behavior_Running_On);
h1704629542.event(temperatureType);
h1704629542.port(get_sensor_port);
h1704629542.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h2089392518 = new Transition();
h2089392518.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h2089392518.event(SwitchOffType);
h2089392518.port(human_input_port);
h2089392518.action((Event e)->{
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((int) (SwitchOff.did));
});

Transition h1441046100 = new Transition();
h1441046100.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_On);
h1441046100.event(SwitchOnType);
h1441046100.port(human_input_port);
h1441046100.action((Event e)->{
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((int) (SwitchOn.did));
});

Transition h1213117992 = new Transition();
h1213117992.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Thermostat);
h1213117992.event(set_energy_saving_tempType);
h1213117992.port(human_input_port);
h1213117992.action((Event e)->{
final Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage set_energy_saving_temp = (Set_energy_saving_tempMessageType.Set_energy_saving_tempMessage) e;
PIM_tmrature_var = (double) (set_energy_saving_temp.t);
PIM_energy_saving_temp_var = (double) (set_energy_saving_temp.t);
});

Transition h1615436583 = new Transition();
h1615436583.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Thermostat);
h1615436583.event(set_temperatureType);
h1615436583.port(human_input_port);
h1615436583.action((Event e)->{
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (double) (set_temperature.t);
});

Transition h1363464556 = new Transition();
h1363464556.from(state_PIM_PIM_behavior_Running_Off).to(state_PIM_PIM_behavior_Running_Off);
h1363464556.event(temperatureType);
h1363464556.port(get_sensor_port);
h1363464556.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (double) (temperature.t);
});

final CompositeState state_PIM_PIM_behavior_Running = new CompositeState("Running");
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Thermostat);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_On);
state_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Off);
state_PIM_PIM_behavior_Running.keepHistory(true);
state_PIM_PIM_behavior_Running.initial(state_PIM_PIM_behavior_Running_Thermostat);
return state_PIM_PIM_behavior_Running;
}

private CompositeState buildPIM_PIM_behavior_Running_Thermostat(){
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecide = new AtomicState("TemprDecide");
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease = new AtomicState("TemprIncrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (15000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease = new AtomicState("TemprDecrease");
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onEntry(()->{
sendTimer_start_via_guard_temperature((int) (15000));
});
state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease.onExit(()->{
sendTimer_cancel_via_guard_temperature();
});

Transition h69540368 = new Transition();
h69540368.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h69540368.guard((Event e)->{
return getPIM_lasttemp_var() >= getPIM_tmrature_var() - 1;
});

h69540368.action((Event e)->{
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h105268710 = new Transition();
h105268710.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h105268710.guard((Event e)->{
return getPIM_lasttemp_var() < getPIM_tmrature_var() - 1;
});

h105268710.action((Event e)->{
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
});

Transition h1257500446 = new Transition();
h1257500446.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h1257500446.event(temperatureType);
h1257500446.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t <= getPIM_tmrature_var() + 1;
});

h1257500446.port(get_sensor_port);
h1257500446.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_increasing_var = (boolean) (true);
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));

} else {
PIM_not_sent_req_var = (boolean) (true);

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h1119506416 = new Transition();
h1119506416.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1119506416.event(temperatureType);
h1119506416.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t > getPIM_tmrature_var() + 1;
});

h1119506416.port(get_sensor_port);
h1119506416.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_increasing_var = (boolean) (false);
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h337520420 = new Transition();
h337520420.from(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h337520420.event(timer_timeoutType);
h337520420.port(guard_temperature_port);
h337520420.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprIncrease - temperature measurement is delayed"));
});

Transition h1102765913 = new Transition();
h1102765913.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h1102765913.event(temperatureType);
h1102765913.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t >= getPIM_tmrature_var() - 1;
});

h1102765913.port(get_sensor_port);
h1102765913.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_increasing_var = (boolean) (false);
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((int) (getPIM_switch_id_var()));

} else {
PIM_not_sent_req_var = (boolean) (true);

}
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h90454488 = new Transition();
h90454488.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
h90454488.event(temperatureType);
h90454488.guard((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t < getPIM_tmrature_var() - 1;
});

h90454488.port(get_sensor_port);
h90454488.action((Event e)->{
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
PIM_increasing_var = (boolean) (true);
sendSwitchOn_via_request_actuator((int) (getPIM_switch_id_var()));
PIM_lasttemp_var = (double) (temperature.t);
});

Transition h211979109 = new Transition();
h211979109.from(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease).to(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
h211979109.event(timer_timeoutType);
h211979109.port(guard_temperature_port);
h211979109.action((Event e)->{
sendPrompt_via_human_output((String) ("WARNING: @TemprDecrease - temperature measurement is delayed"));
});

final CompositeState state_PIM_PIM_behavior_Running_Thermostat = new CompositeState("Thermostat");
state_PIM_PIM_behavior_Running_Thermostat.onEntry(()->{
});
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
state_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
state_PIM_PIM_behavior_Running_Thermostat.initial(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
return state_PIM_PIM_behavior_Running_Thermostat;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port("get_sensor", this);
get_power_usage_port = new Port("get_power_usage", this);
request_sensor_port = new Port("request_sensor", this);
request_actuator_port = new Port("request_actuator", this);
recv_state_port = new Port("recv_state", this);
human_input_port = new Port("human_input", this);
human_output_port = new Port("human_output", this);
guard_temperature_port = new Port("guard_temperature", this);
guard_human_port = new Port("guard_human", this);
guard_switch_port = new Port("guard_switch", this);
recieve_motion_status_port = new Port("recieve_motion_status", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
get_power_usage_port = ((PIM)root).get_power_usage_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
recv_state_port = ((PIM)root).recv_state_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
guard_temperature_port = ((PIM)root).guard_temperature_port;
guard_human_port = ((PIM)root).guard_human_port;
guard_switch_port = ((PIM)root).guard_switch_port;
recieve_motion_status_port = ((PIM)root).recieve_motion_status_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
