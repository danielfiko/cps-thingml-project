/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Human
 **/
public class Human extends Component implements IHuman_get_values {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void temperature_via_get_values(int TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, double TemperatureMsg_temperature_t_var){
final Event _msg = temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
_msg.setPort(get_values_port);
receive(_msg);
}

public synchronized void prompt_via_get_values(String GeneralMsg_prompt_txt_var){
final Event _msg = promptType.instantiate(GeneralMsg_prompt_txt_var);
_msg.setPort(get_values_port);
receive(_msg);
}

public synchronized void SwitchStateOn_via_get_values(int OnOffMsg_SwitchStateOn_did_var){
final Event _msg = SwitchStateOnType.instantiate(OnOffMsg_SwitchStateOn_did_var);
_msg.setPort(get_values_port);
receive(_msg);
}

public synchronized void SwitchStateOff_via_get_values(int OnOffMsg_SwitchStateOff_did_var){
final Event _msg = SwitchStateOffType.instantiate(OnOffMsg_SwitchStateOff_did_var);
_msg.setPort(get_values_port);
receive(_msg);
}

private void sendAdd_thermometer_via_send_cmd(int TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
send_cmd_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
}

private void sendAdd_device_via_send_cmd(int DeviceGeneral_add_device_did_var){
send_cmd_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
}

private void sendSet_temperature_via_send_cmd(double TemperatureMsg_set_temperature_t_var){
send_cmd_port.send(set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var));
}

private void sendSwitchOn_via_send_cmd(int OnOffMsg_SwitchOn_did_var){
send_cmd_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
}

private void sendSwitchOff_via_send_cmd(int OnOffMsg_SwitchOff_did_var){
send_cmd_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
}

private void sendSet_polling_interval_via_send_cmd(int GeneralMsg_set_polling_interval_intrvl_var){
send_cmd_port.send(set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var));
}

private void sendResetTotalPower_via_send_cmd(int OnOffMsg_ResetTotalPower_did_var){
send_cmd_port.send(ResetTotalPowerType.instantiate(OnOffMsg_ResetTotalPower_did_var));
}

private void sendSet_energy_saving_temp_via_send_cmd(double TemperatureMsg_set_energy_saving_temp_t_var){
send_cmd_port.send(set_energy_saving_tempType.instantiate(TemperatureMsg_set_energy_saving_temp_t_var));
}

//Attributes
//Ports
private Port send_cmd_port;
private Port get_values_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
protected final Set_energy_saving_tempMessageType set_energy_saving_tempType = new Set_energy_saving_tempMessageType();
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
protected final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
protected final PromptMessageType promptType = new PromptMessageType();
protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
protected final SwitchStateOnMessageType SwitchStateOnType = new SwitchStateOnMessageType();
protected final SwitchStateOffMessageType SwitchStateOffType = new SwitchStateOffMessageType();
protected final StateQueryMessageType StateQueryType = new StateQueryMessageType();
protected final CurrentPowerMessageType CurrentPowerType = new CurrentPowerMessageType();
protected final TotalPowerMessageType TotalPowerType = new TotalPowerMessageType();
protected final SwitchChangeOkMessageType SwitchChangeOkType = new SwitchChangeOkMessageType();
protected final SwitchChangeFailMessageType SwitchChangeFailType = new SwitchChangeFailMessageType();
protected final ResetTotalPowerMessageType ResetTotalPowerType = new ResetTotalPowerMessageType();
protected final Current_powerMessageType current_powerType = new Current_powerMessageType();
protected final Total_powerMessageType total_powerType = new Total_powerMessageType();
protected final Show_current_powerMessageType show_current_powerType = new Show_current_powerMessageType();
protected final Show_total_powerMessageType show_total_powerType = new Show_total_powerMessageType();
//Empty Constructor
public Human() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getSend_cmd_port() {
return send_cmd_port;
}
public Port getGet_values_port() {
return get_values_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
send_cmd_port = new Port("send_cmd", this);
get_values_port = new Port("get_values", this);
} else {
send_cmd_port = ((Human)root).send_cmd_port;
get_values_port = ((Human)root).get_values_port;
}
if (session == null){
//Init state machine
}
return this;
}

}
